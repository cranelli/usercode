#include <algorithm>
#include <iostream>
#include "TTree.h"
#include "TChain.h"
#include "include/BranchInit.h"
#include "include/BranchDefs.h"

namespace IN {
 Int_t				nVtxBS;
 Float_t				pfMET;
 Float_t				pfMETPhi;
 Float_t				pfMETsumEt;
 Float_t				pfMETmEtSig;
 Float_t				pfMETSig;
 Float_t				recoPfMET;
 Float_t				recoPfMETPhi;
 Float_t				recoPfMETsumEt;
 Float_t				recoPfMETmEtSig;
 Float_t				recoPfMETSig;
 Int_t				el_n;
 Int_t				mu_n;
 Int_t				ph_n;
 Int_t				vtx_n;
 std::vector<float>				*el_pt;
 std::vector<float>				*el_eta;
 std::vector<float>				*el_sceta;
 std::vector<float>				*el_phi;
 std::vector<float>				*el_e;
 std::vector<float>				*el_mva;
 std::vector<float>				*el_d0pv;
 std::vector<float>				*el_z0pv;
 std::vector<bool>				*el_hasMatchedConv;
 std::vector<bool>				*el_passTight;
 std::vector<bool>				*el_passMedium;
 std::vector<bool>				*el_passLoose;
 std::vector<bool>				*el_passVeryLoose;
 std::vector<bool>				*el_truthMatch_ph;
 std::vector<bool>				*el_truthMatch;
 std::vector<float>				*el_truthMinDR;
 std::vector<float>				*mu_pt;
 std::vector<float>				*mu_eta;
 std::vector<float>				*mu_phi;
 std::vector<float>				*mu_e;
 std::vector<float>				*mu_pfIso_ch;
 std::vector<float>				*mu_pfIso_nh;
 std::vector<float>				*mu_pfIso_pho;
 std::vector<float>				*mu_pfIso_pu;
 std::vector<float>				*mu_corrIso;
 std::vector<bool>				*mu_truthMatch;
 std::vector<float>				*mu_truthMinDR;
 std::vector<float>				*ph_pt;
 std::vector<float>				*ph_eta;
 std::vector<float>				*ph_phi;
 std::vector<float>				*ph_e;
 std::vector<float>				*ph_HoverE;
 std::vector<float>				*ph_sigmaIEIE;
 std::vector<float>				*ph_chIsoCorr;
 std::vector<float>				*ph_neuIsoCorr;
 std::vector<float>				*ph_phoIsoCorr;
 std::vector<bool>				*ph_isConv;
 std::vector<int>				*ph_conv_nTrk;
 std::vector<float>				*ph_conv_vtx_x;
 std::vector<float>				*ph_conv_vtx_y;
 std::vector<float>				*ph_conv_vtx_z;
 std::vector<float>				*ph_conv_ptin1;
 std::vector<float>				*ph_conv_ptin2;
 std::vector<float>				*ph_conv_ptout1;
 std::vector<float>				*ph_conv_ptout2;
 std::vector<bool>				*ph_passTight;
 std::vector<bool>				*ph_passMedium;
 std::vector<bool>				*ph_passLoose;
 Float_t				avgPU;
 Float_t				leadPhot_pt;
 Float_t				sublPhot_pt;
 Float_t				leadPhot_lepDR;
 Float_t				sublPhot_lepDR;
 Float_t				ph_phDR;
 Float_t				phPhot_lepDR;
 Float_t				leadPhot_lepDPhi;
 Float_t				sublPhot_lepDPhi;
 Float_t				ph_phDPhi;
 Float_t				phPhot_lepDPhi;
 Float_t				mt_lep_met;
 Float_t				mt_lepph1_met;
 Float_t				mt_lepph2_met;
 Float_t				mt_lepphph_met;
 Float_t				m_leplep;
 Float_t				m_lepph1;
 Float_t				m_lepph2;
 Float_t				m_lepphph;
 Float_t				m_phph;
};
namespace OUT {
 Int_t				nVtxBS;
 Float_t				pfMET;
 Float_t				pfMETPhi;
 Float_t				pfMETsumEt;
 Float_t				pfMETmEtSig;
 Float_t				pfMETSig;
 Float_t				recoPfMET;
 Float_t				recoPfMETPhi;
 Float_t				recoPfMETsumEt;
 Float_t				recoPfMETmEtSig;
 Float_t				recoPfMETSig;
 Int_t				el_n;
 Int_t				mu_n;
 Int_t				ph_n;
 Int_t				vtx_n;
 std::vector<float>				*el_pt;
 std::vector<float>				*el_eta;
 std::vector<float>				*el_sceta;
 std::vector<float>				*el_phi;
 std::vector<float>				*el_e;
 std::vector<float>				*el_mva;
 std::vector<float>				*el_d0pv;
 std::vector<float>				*el_z0pv;
 std::vector<bool>				*el_hasMatchedConv;
 std::vector<bool>				*el_passTight;
 std::vector<bool>				*el_passMedium;
 std::vector<bool>				*el_passLoose;
 std::vector<bool>				*el_passVeryLoose;
 std::vector<bool>				*el_truthMatch_ph;
 std::vector<bool>				*el_truthMatch;
 std::vector<float>				*el_truthMinDR;
 std::vector<float>				*mu_pt;
 std::vector<float>				*mu_eta;
 std::vector<float>				*mu_phi;
 std::vector<float>				*mu_e;
 std::vector<float>				*mu_pfIso_ch;
 std::vector<float>				*mu_pfIso_nh;
 std::vector<float>				*mu_pfIso_pho;
 std::vector<float>				*mu_pfIso_pu;
 std::vector<float>				*mu_corrIso;
 std::vector<bool>				*mu_truthMatch;
 std::vector<float>				*mu_truthMinDR;
 std::vector<float>				*ph_pt;
 std::vector<float>				*ph_eta;
 std::vector<float>				*ph_phi;
 std::vector<float>				*ph_e;
 std::vector<float>				*ph_HoverE;
 std::vector<float>				*ph_sigmaIEIE;
 std::vector<float>				*ph_chIsoCorr;
 std::vector<float>				*ph_neuIsoCorr;
 std::vector<float>				*ph_phoIsoCorr;
 std::vector<bool>				*ph_isConv;
 std::vector<int>				*ph_conv_nTrk;
 std::vector<float>				*ph_conv_vtx_x;
 std::vector<float>				*ph_conv_vtx_y;
 std::vector<float>				*ph_conv_vtx_z;
 std::vector<float>				*ph_conv_ptin1;
 std::vector<float>				*ph_conv_ptin2;
 std::vector<float>				*ph_conv_ptout1;
 std::vector<float>				*ph_conv_ptout2;
 std::vector<bool>				*ph_passTight;
 std::vector<bool>				*ph_passMedium;
 std::vector<bool>				*ph_passLoose;
 Float_t				avgPU;
 Float_t				leadPhot_pt;
 Float_t				sublPhot_pt;
 Float_t				leadPhot_lepDR;
 Float_t				sublPhot_lepDR;
 Float_t				ph_phDR;
 Float_t				phPhot_lepDR;
 Float_t				leadPhot_lepDPhi;
 Float_t				sublPhot_lepDPhi;
 Float_t				ph_phDPhi;
 Float_t				phPhot_lepDPhi;
 Float_t				mt_lep_met;
 Float_t				mt_lepph1_met;
 Float_t				mt_lepph2_met;
 Float_t				mt_lepphph_met;
 Float_t				m_leplep;
 Float_t				m_lepph1;
 Float_t				m_lepph2;
 Float_t				m_lepphph;
 Float_t				m_phph;
};
void InitINTree( TChain * tree) {

  tree->SetBranchAddress("nVtxBS", &IN::nVtxBS);
  tree->SetBranchAddress("pfMET", &IN::pfMET);
  tree->SetBranchAddress("pfMETPhi", &IN::pfMETPhi);
  tree->SetBranchAddress("pfMETsumEt", &IN::pfMETsumEt);
  tree->SetBranchAddress("pfMETmEtSig", &IN::pfMETmEtSig);
  tree->SetBranchAddress("pfMETSig", &IN::pfMETSig);
  tree->SetBranchAddress("recoPfMET", &IN::recoPfMET);
  tree->SetBranchAddress("recoPfMETPhi", &IN::recoPfMETPhi);
  tree->SetBranchAddress("recoPfMETsumEt", &IN::recoPfMETsumEt);
  tree->SetBranchAddress("recoPfMETmEtSig", &IN::recoPfMETmEtSig);
  tree->SetBranchAddress("recoPfMETSig", &IN::recoPfMETSig);
  tree->SetBranchAddress("el_n", &IN::el_n);
  tree->SetBranchAddress("mu_n", &IN::mu_n);
  tree->SetBranchAddress("ph_n", &IN::ph_n);
  tree->SetBranchAddress("vtx_n", &IN::vtx_n);
  tree->SetBranchAddress("el_pt", &IN::el_pt);
  tree->SetBranchAddress("el_eta", &IN::el_eta);
  tree->SetBranchAddress("el_sceta", &IN::el_sceta);
  tree->SetBranchAddress("el_phi", &IN::el_phi);
  tree->SetBranchAddress("el_e", &IN::el_e);
  tree->SetBranchAddress("el_mva", &IN::el_mva);
  tree->SetBranchAddress("el_d0pv", &IN::el_d0pv);
  tree->SetBranchAddress("el_z0pv", &IN::el_z0pv);
  tree->SetBranchAddress("el_hasMatchedConv", &IN::el_hasMatchedConv);
  tree->SetBranchAddress("el_passTight", &IN::el_passTight);
  tree->SetBranchAddress("el_passMedium", &IN::el_passMedium);
  tree->SetBranchAddress("el_passLoose", &IN::el_passLoose);
  tree->SetBranchAddress("el_passVeryLoose", &IN::el_passVeryLoose);
  tree->SetBranchAddress("el_truthMatch_ph", &IN::el_truthMatch_ph);
  tree->SetBranchAddress("el_truthMatch", &IN::el_truthMatch);
  tree->SetBranchAddress("el_truthMinDR", &IN::el_truthMinDR);
  tree->SetBranchAddress("mu_pt", &IN::mu_pt);
  tree->SetBranchAddress("mu_eta", &IN::mu_eta);
  tree->SetBranchAddress("mu_phi", &IN::mu_phi);
  tree->SetBranchAddress("mu_e", &IN::mu_e);
  tree->SetBranchAddress("mu_pfIso_ch", &IN::mu_pfIso_ch);
  tree->SetBranchAddress("mu_pfIso_nh", &IN::mu_pfIso_nh);
  tree->SetBranchAddress("mu_pfIso_pho", &IN::mu_pfIso_pho);
  tree->SetBranchAddress("mu_pfIso_pu", &IN::mu_pfIso_pu);
  tree->SetBranchAddress("mu_corrIso", &IN::mu_corrIso);
  tree->SetBranchAddress("mu_truthMatch", &IN::mu_truthMatch);
  tree->SetBranchAddress("mu_truthMinDR", &IN::mu_truthMinDR);
  tree->SetBranchAddress("ph_pt", &IN::ph_pt);
  tree->SetBranchAddress("ph_eta", &IN::ph_eta);
  tree->SetBranchAddress("ph_phi", &IN::ph_phi);
  tree->SetBranchAddress("ph_e", &IN::ph_e);
  tree->SetBranchAddress("ph_HoverE", &IN::ph_HoverE);
  tree->SetBranchAddress("ph_sigmaIEIE", &IN::ph_sigmaIEIE);
  tree->SetBranchAddress("ph_chIsoCorr", &IN::ph_chIsoCorr);
  tree->SetBranchAddress("ph_neuIsoCorr", &IN::ph_neuIsoCorr);
  tree->SetBranchAddress("ph_phoIsoCorr", &IN::ph_phoIsoCorr);
  tree->SetBranchAddress("ph_isConv", &IN::ph_isConv);
  tree->SetBranchAddress("ph_conv_nTrk", &IN::ph_conv_nTrk);
  tree->SetBranchAddress("ph_conv_vtx_x", &IN::ph_conv_vtx_x);
  tree->SetBranchAddress("ph_conv_vtx_y", &IN::ph_conv_vtx_y);
  tree->SetBranchAddress("ph_conv_vtx_z", &IN::ph_conv_vtx_z);
  tree->SetBranchAddress("ph_conv_ptin1", &IN::ph_conv_ptin1);
  tree->SetBranchAddress("ph_conv_ptin2", &IN::ph_conv_ptin2);
  tree->SetBranchAddress("ph_conv_ptout1", &IN::ph_conv_ptout1);
  tree->SetBranchAddress("ph_conv_ptout2", &IN::ph_conv_ptout2);
  tree->SetBranchAddress("ph_passTight", &IN::ph_passTight);
  tree->SetBranchAddress("ph_passMedium", &IN::ph_passMedium);
  tree->SetBranchAddress("ph_passLoose", &IN::ph_passLoose);
  tree->SetBranchAddress("avgPU", &IN::avgPU);
  tree->SetBranchAddress("leadPhot_pt", &IN::leadPhot_pt);
  tree->SetBranchAddress("sublPhot_pt", &IN::sublPhot_pt);
  tree->SetBranchAddress("leadPhot_lepDR", &IN::leadPhot_lepDR);
  tree->SetBranchAddress("sublPhot_lepDR", &IN::sublPhot_lepDR);
  tree->SetBranchAddress("ph_phDR", &IN::ph_phDR);
  tree->SetBranchAddress("phPhot_lepDR", &IN::phPhot_lepDR);
  tree->SetBranchAddress("leadPhot_lepDPhi", &IN::leadPhot_lepDPhi);
  tree->SetBranchAddress("sublPhot_lepDPhi", &IN::sublPhot_lepDPhi);
  tree->SetBranchAddress("ph_phDPhi", &IN::ph_phDPhi);
  tree->SetBranchAddress("phPhot_lepDPhi", &IN::phPhot_lepDPhi);
  tree->SetBranchAddress("mt_lep_met", &IN::mt_lep_met);
  tree->SetBranchAddress("mt_lepph1_met", &IN::mt_lepph1_met);
  tree->SetBranchAddress("mt_lepph2_met", &IN::mt_lepph2_met);
  tree->SetBranchAddress("mt_lepphph_met", &IN::mt_lepphph_met);
  tree->SetBranchAddress("m_leplep", &IN::m_leplep);
  tree->SetBranchAddress("m_lepph1", &IN::m_lepph1);
  tree->SetBranchAddress("m_lepph2", &IN::m_lepph2);
  tree->SetBranchAddress("m_lepphph", &IN::m_lepphph);
  tree->SetBranchAddress("m_phph", &IN::m_phph);
};

void InitOUTTree( TTree * tree ) {
  tree->Branch("nVtxBS", &OUT::nVtxBS, "nVtxBS/I");
  tree->Branch("pfMET", &OUT::pfMET, "pfMET/F");
  tree->Branch("pfMETPhi", &OUT::pfMETPhi, "pfMETPhi/F");
  tree->Branch("pfMETsumEt", &OUT::pfMETsumEt, "pfMETsumEt/F");
  tree->Branch("pfMETmEtSig", &OUT::pfMETmEtSig, "pfMETmEtSig/F");
  tree->Branch("pfMETSig", &OUT::pfMETSig, "pfMETSig/F");
  tree->Branch("recoPfMET", &OUT::recoPfMET, "recoPfMET/F");
  tree->Branch("recoPfMETPhi", &OUT::recoPfMETPhi, "recoPfMETPhi/F");
  tree->Branch("recoPfMETsumEt", &OUT::recoPfMETsumEt, "recoPfMETsumEt/F");
  tree->Branch("recoPfMETmEtSig", &OUT::recoPfMETmEtSig, "recoPfMETmEtSig/F");
  tree->Branch("recoPfMETSig", &OUT::recoPfMETSig, "recoPfMETSig/F");
  tree->Branch("el_n", &OUT::el_n, "el_n/I");
  tree->Branch("mu_n", &OUT::mu_n, "mu_n/I");
  tree->Branch("ph_n", &OUT::ph_n, "ph_n/I");
  tree->Branch("vtx_n", &OUT::vtx_n, "vtx_n/I");
  tree->Branch("el_pt", &OUT::el_pt);
  tree->Branch("el_eta", &OUT::el_eta);
  tree->Branch("el_sceta", &OUT::el_sceta);
  tree->Branch("el_phi", &OUT::el_phi);
  tree->Branch("el_e", &OUT::el_e);
  tree->Branch("el_mva", &OUT::el_mva);
  tree->Branch("el_d0pv", &OUT::el_d0pv);
  tree->Branch("el_z0pv", &OUT::el_z0pv);
  tree->Branch("el_hasMatchedConv", &OUT::el_hasMatchedConv);
  tree->Branch("el_passTight", &OUT::el_passTight);
  tree->Branch("el_passMedium", &OUT::el_passMedium);
  tree->Branch("el_passLoose", &OUT::el_passLoose);
  tree->Branch("el_passVeryLoose", &OUT::el_passVeryLoose);
  tree->Branch("el_truthMatch_ph", &OUT::el_truthMatch_ph);
  tree->Branch("el_truthMatch", &OUT::el_truthMatch);
  tree->Branch("el_truthMinDR", &OUT::el_truthMinDR);
  tree->Branch("mu_pt", &OUT::mu_pt);
  tree->Branch("mu_eta", &OUT::mu_eta);
  tree->Branch("mu_phi", &OUT::mu_phi);
  tree->Branch("mu_e", &OUT::mu_e);
  tree->Branch("mu_pfIso_ch", &OUT::mu_pfIso_ch);
  tree->Branch("mu_pfIso_nh", &OUT::mu_pfIso_nh);
  tree->Branch("mu_pfIso_pho", &OUT::mu_pfIso_pho);
  tree->Branch("mu_pfIso_pu", &OUT::mu_pfIso_pu);
  tree->Branch("mu_corrIso", &OUT::mu_corrIso);
  tree->Branch("mu_truthMatch", &OUT::mu_truthMatch);
  tree->Branch("mu_truthMinDR", &OUT::mu_truthMinDR);
  tree->Branch("ph_pt", &OUT::ph_pt);
  tree->Branch("ph_eta", &OUT::ph_eta);
  tree->Branch("ph_phi", &OUT::ph_phi);
  tree->Branch("ph_e", &OUT::ph_e);
  tree->Branch("ph_HoverE", &OUT::ph_HoverE);
  tree->Branch("ph_sigmaIEIE", &OUT::ph_sigmaIEIE);
  tree->Branch("ph_chIsoCorr", &OUT::ph_chIsoCorr);
  tree->Branch("ph_neuIsoCorr", &OUT::ph_neuIsoCorr);
  tree->Branch("ph_phoIsoCorr", &OUT::ph_phoIsoCorr);
  tree->Branch("ph_isConv", &OUT::ph_isConv);
  tree->Branch("ph_conv_nTrk", &OUT::ph_conv_nTrk);
  tree->Branch("ph_conv_vtx_x", &OUT::ph_conv_vtx_x);
  tree->Branch("ph_conv_vtx_y", &OUT::ph_conv_vtx_y);
  tree->Branch("ph_conv_vtx_z", &OUT::ph_conv_vtx_z);
  tree->Branch("ph_conv_ptin1", &OUT::ph_conv_ptin1);
  tree->Branch("ph_conv_ptin2", &OUT::ph_conv_ptin2);
  tree->Branch("ph_conv_ptout1", &OUT::ph_conv_ptout1);
  tree->Branch("ph_conv_ptout2", &OUT::ph_conv_ptout2);
  tree->Branch("ph_passTight", &OUT::ph_passTight);
  tree->Branch("ph_passMedium", &OUT::ph_passMedium);
  tree->Branch("ph_passLoose", &OUT::ph_passLoose);
  tree->Branch("avgPU", &OUT::avgPU, "avgPU/F");
  tree->Branch("leadPhot_pt", &OUT::leadPhot_pt, "leadPhot_pt/F");
  tree->Branch("sublPhot_pt", &OUT::sublPhot_pt, "sublPhot_pt/F");
  tree->Branch("leadPhot_lepDR", &OUT::leadPhot_lepDR, "leadPhot_lepDR/F");
  tree->Branch("sublPhot_lepDR", &OUT::sublPhot_lepDR, "sublPhot_lepDR/F");
  tree->Branch("ph_phDR", &OUT::ph_phDR, "ph_phDR/F");
  tree->Branch("phPhot_lepDR", &OUT::phPhot_lepDR, "phPhot_lepDR/F");
  tree->Branch("leadPhot_lepDPhi", &OUT::leadPhot_lepDPhi, "leadPhot_lepDPhi/F");
  tree->Branch("sublPhot_lepDPhi", &OUT::sublPhot_lepDPhi, "sublPhot_lepDPhi/F");
  tree->Branch("ph_phDPhi", &OUT::ph_phDPhi, "ph_phDPhi/F");
  tree->Branch("phPhot_lepDPhi", &OUT::phPhot_lepDPhi, "phPhot_lepDPhi/F");
  tree->Branch("mt_lep_met", &OUT::mt_lep_met, "mt_lep_met/F");
  tree->Branch("mt_lepph1_met", &OUT::mt_lepph1_met, "mt_lepph1_met/F");
  tree->Branch("mt_lepph2_met", &OUT::mt_lepph2_met, "mt_lepph2_met/F");
  tree->Branch("mt_lepphph_met", &OUT::mt_lepphph_met, "mt_lepphph_met/F");
  tree->Branch("m_leplep", &OUT::m_leplep, "m_leplep/F");
  tree->Branch("m_lepph1", &OUT::m_lepph1, "m_lepph1/F");
  tree->Branch("m_lepph2", &OUT::m_lepph2, "m_lepph2/F");
  tree->Branch("m_lepphph", &OUT::m_lepphph, "m_lepphph/F");
  tree->Branch("m_phph", &OUT::m_phph, "m_phph/F");
}
void CopyInputVarsToOutput() {
  OUT::nVtxBS = IN::nVtxBS;
  OUT::pfMET = IN::pfMET;
  OUT::pfMETPhi = IN::pfMETPhi;
  OUT::pfMETsumEt = IN::pfMETsumEt;
  OUT::pfMETmEtSig = IN::pfMETmEtSig;
  OUT::pfMETSig = IN::pfMETSig;
  OUT::recoPfMET = IN::recoPfMET;
  OUT::recoPfMETPhi = IN::recoPfMETPhi;
  OUT::recoPfMETsumEt = IN::recoPfMETsumEt;
  OUT::recoPfMETmEtSig = IN::recoPfMETmEtSig;
  OUT::recoPfMETSig = IN::recoPfMETSig;
  OUT::el_n = IN::el_n;
  OUT::mu_n = IN::mu_n;
  OUT::ph_n = IN::ph_n;
  OUT::vtx_n = IN::vtx_n;
  OUT::el_pt = IN::el_pt;
  OUT::el_eta = IN::el_eta;
  OUT::el_sceta = IN::el_sceta;
  OUT::el_phi = IN::el_phi;
  OUT::el_e = IN::el_e;
  OUT::el_mva = IN::el_mva;
  OUT::el_d0pv = IN::el_d0pv;
  OUT::el_z0pv = IN::el_z0pv;
  OUT::el_hasMatchedConv = IN::el_hasMatchedConv;
  OUT::el_passTight = IN::el_passTight;
  OUT::el_passMedium = IN::el_passMedium;
  OUT::el_passLoose = IN::el_passLoose;
  OUT::el_passVeryLoose = IN::el_passVeryLoose;
  OUT::el_truthMatch_ph = IN::el_truthMatch_ph;
  OUT::el_truthMatch = IN::el_truthMatch;
  OUT::el_truthMinDR = IN::el_truthMinDR;
  OUT::mu_pt = IN::mu_pt;
  OUT::mu_eta = IN::mu_eta;
  OUT::mu_phi = IN::mu_phi;
  OUT::mu_e = IN::mu_e;
  OUT::mu_pfIso_ch = IN::mu_pfIso_ch;
  OUT::mu_pfIso_nh = IN::mu_pfIso_nh;
  OUT::mu_pfIso_pho = IN::mu_pfIso_pho;
  OUT::mu_pfIso_pu = IN::mu_pfIso_pu;
  OUT::mu_corrIso = IN::mu_corrIso;
  OUT::mu_truthMatch = IN::mu_truthMatch;
  OUT::mu_truthMinDR = IN::mu_truthMinDR;
  OUT::ph_pt = IN::ph_pt;
  OUT::ph_eta = IN::ph_eta;
  OUT::ph_phi = IN::ph_phi;
  OUT::ph_e = IN::ph_e;
  OUT::ph_HoverE = IN::ph_HoverE;
  OUT::ph_sigmaIEIE = IN::ph_sigmaIEIE;
  OUT::ph_chIsoCorr = IN::ph_chIsoCorr;
  OUT::ph_neuIsoCorr = IN::ph_neuIsoCorr;
  OUT::ph_phoIsoCorr = IN::ph_phoIsoCorr;
  OUT::ph_isConv = IN::ph_isConv;
  OUT::ph_conv_nTrk = IN::ph_conv_nTrk;
  OUT::ph_conv_vtx_x = IN::ph_conv_vtx_x;
  OUT::ph_conv_vtx_y = IN::ph_conv_vtx_y;
  OUT::ph_conv_vtx_z = IN::ph_conv_vtx_z;
  OUT::ph_conv_ptin1 = IN::ph_conv_ptin1;
  OUT::ph_conv_ptin2 = IN::ph_conv_ptin2;
  OUT::ph_conv_ptout1 = IN::ph_conv_ptout1;
  OUT::ph_conv_ptout2 = IN::ph_conv_ptout2;
  OUT::ph_passTight = IN::ph_passTight;
  OUT::ph_passMedium = IN::ph_passMedium;
  OUT::ph_passLoose = IN::ph_passLoose;
  OUT::avgPU = IN::avgPU;
  OUT::leadPhot_pt = IN::leadPhot_pt;
  OUT::sublPhot_pt = IN::sublPhot_pt;
  OUT::leadPhot_lepDR = IN::leadPhot_lepDR;
  OUT::sublPhot_lepDR = IN::sublPhot_lepDR;
  OUT::ph_phDR = IN::ph_phDR;
  OUT::phPhot_lepDR = IN::phPhot_lepDR;
  OUT::leadPhot_lepDPhi = IN::leadPhot_lepDPhi;
  OUT::sublPhot_lepDPhi = IN::sublPhot_lepDPhi;
  OUT::ph_phDPhi = IN::ph_phDPhi;
  OUT::phPhot_lepDPhi = IN::phPhot_lepDPhi;
  OUT::mt_lep_met = IN::mt_lep_met;
  OUT::mt_lepph1_met = IN::mt_lepph1_met;
  OUT::mt_lepph2_met = IN::mt_lepph2_met;
  OUT::mt_lepphph_met = IN::mt_lepphph_met;
  OUT::m_leplep = IN::m_leplep;
  OUT::m_lepph1 = IN::m_lepph1;
  OUT::m_lepph2 = IN::m_lepph2;
  OUT::m_lepphph = IN::m_lepphph;
  OUT::m_phph = IN::m_phph;
}
